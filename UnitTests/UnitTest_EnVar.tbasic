Uses "EnVar"
Uses "Console", "File"      

#INCLUDE "unitTesting.tBasicU"

Function TBMain()
  
  Print "Testing thinBasic_EnvVar feature set..."
  ut_Initialize()

  ut_LaunchTests("")
  
  ut_Release()
  
  If ut_FailCount Then               
    ut_SaveLog()           
    PrintL
    PrintL
    PrintL "See the following file for all the details:" In 15
    PrintL ut_logFileName In 14
    PrintL                     
    PrintL "Brief overview of " + ut_FailCount + " failures:" In 11
    PrintUnitTestIssues(ut_logFileName)    
    
  Else
    PrintL "PASSED" In 10  
  End If  
  
  WaitKey

End Function

Function PrintUnitTestIssues(sourceFile As String)

  String content = FILE_Load(ut_logFileName)
  String unitTest, failure
  
  Long   issueCount = Grab$(content, "<failCount>", "</failCount>")  
    
  Long i
  For i = 1 To issueCount
    unitTest = Grab$(content, "<testName>", "</testName>", i)
    failure  = Grab$(content, "<description>", "</description>", i)
  
    PrintL unitTest In 15
    PrintL failure In 12
    PrintL
    
  Next          

End Function  

' -----------------------------------------------------------------------------

Function test_Teardown()
  enVar_Remove("enVarUnitTest")
End Function

' -----------------------------------------------------------------------------

Function test_List_CalledWithoutSeparator_GotSeparatedByCommas()

  ut_assertIsGreater(Tally(enVar_List, ","), 0)
  
End Function

Function test_List_CalledWithSemicolonSeparator_GotSeparatedBySemicolons()

  ut_assertIsGreater(Tally(enVar_List(";"), ";"), 0)
  
End Function

Function test_Set_PairPassed_PairStored()

  enVar_Set("enVarUnitTest", "Got saved")
  ut_assertIsGreater(InStr(enVar_List, ",enVarUnitTest,"), 0)
  
End Function

Function test_Get_PairPassed_PairRead()

  enVar_Set ("enVarUnitTest", "Got saved")
  ut_assertEqualText(enVar_Get("enVarUnitTest"), "Got saved")
  
End Function

Function test_GetItem_3ValuesPassed_AllRetrieveable()

  enVar_Set ("enVarUnitTest", "One,Two,Three")
  ut_assertEqualText("One"  , enVar_GetItem("enVarUnitTest", ",", 1))
  ut_assertEqualText("Two"  , enVar_GetItem("enVarUnitTest", ",", 2))
  ut_assertEqualText("Three", enVar_GetItem("enVarUnitTest", ",", 3))
  
End Function

Function test_GetItem_3ValuesPassed_AllRetrieveableWithNegativeIndex()

  enVar_Set ("enVarUnitTest", "One,Two,Three")
  ut_assertEqualText("One"  , enVar_GetItem("enVarUnitTest", ",", -3))
  ut_assertEqualText("Two"  , enVar_GetItem("enVarUnitTest", ",", -2))
  ut_assertEqualText("Three", enVar_GetItem("enVarUnitTest", ",", -1))
    
End Function

Function test_GetItem_3ValuesPassedEmptySeparatorSpecified_AllRetrievable()

  enVar_Set ("enVarUnitTest", "One,Two,Three")
  ut_assertEqualText("One"  , enVar_GetItem("enVarUnitTest", "", 1))
  ut_assertEqualText("Two"  , enVar_GetItem("enVarUnitTest", "", 2))
  ut_assertEqualText("Three", enVar_GetItem("enVarUnitTest", "", 3))
    
End Function

Function test_GetItem_3ValuesPassedRetrieving4th_GotEmptyString()

  enVar_Set ("enVarUnitTest", "One,Two,Three")
  ut_assertEqualText("", enVar_GetItem("enVarUnitTest", ",", 4))
  
End Function
                                 
Function test_GetItemCount_3ValuesPassed_CountOf3Detected()

  enVar_Set ("enVarUnitTest", "One,Two,Three")
  ut_assertEqual(3, enVar_GetItemCount("enVarUnitTest", ","))
  
End Function

Function test_GetItemCount_3ValuesPassedNoSeparator_CountOf3Detected()

  enVar_Set ("enVarUnitTest", "One,Two,Three")
  ut_assertEqual(3, enVar_GetItemCount("enVarUnitTest"))
  
End Function


Function test_Remove_FirstPassed_NoLongerPresent()
  
  String myVar = Parse$(enVar_List, ",", 1)
  
  enVar_Remove myVar

  ut_assertEqual(InStr(enVar_List, myVar+","), 0)
  
End Function

Function test_Exists_ExistingQueried_Found()
  
  enVar_Set("enVarUnitTest", "Got saved")  
  ut_assertIsTrue(enVar_Exists("enVarUnitTest"))
  
End Function

Function test_Exists_NonExistingQueried_NotFound()
  
  ut_assertIsFalse(enVar_Exists("enVarUnitTest"))
  
End Function
